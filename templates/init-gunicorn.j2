#!/bin/sh

# This file was generated by Ansible for {{ ansible_fqdn }}
# Do NOT modify this file by hand!

{% set app = item -%}

# gunicorn - Startup script for gunicorn
#
# chkconfig: - 85 15
# processname: {{app.gunicorn_command|default(wsgi_gunicorn_command)}}
# config: /etc/sysconfig/$prog
# pidfile: {{app.run_dir|default(wsgi_run_dir)}}/{{app.name}}.pid
# description: Gunicorn is a program to run applications adhering to the Web Server Gateway Interface.

# Setting `prog` here allows you to symlink this init script, making it easy
# to run multiple processes on the system.
PROG="$(basename $0)"

# Source function library.
. /etc/rc.d/init.d/functions

# Also look at sysconfig; this is where environmental variables should be set
# on RHEL systems.
[ -f "/etc/sysconfig/$PROG" ] && . /etc/sysconfig/$PROG

GUNICORN={{app.virtualenv|default(wsgi_virtualenv)}}/bin/{{app.gunicorn_command|default(wsgi_gunicorn_command)}}
PIDFILE="{{app.run_dir|default(wsgi_run_dir)}}/{{app.name}}.pid"
LOCKFILE="/var/lock/subsys/{{app.name}}"
OPTS="\
    --bind={{app.socket|default('unix:' + app.get('run_dir', wsgi_run_dir) + '/' + app.name)}} \
    --log-file={{app.log_dir|default(wsgi_log_dir)}}/{{app.name}}-wsgi.log \
    --name={{app.name}} \
    --pid={{app.run_dir|default(wsgi_run_dir)}}/{{app.name}}.pid \
    --worker-class={{app.gunicorn_worker|default(wsgi_gunicorn_worker)}} \
    --workers={{app.gunicorn_workers|default(wsgi_gunicorn_workers)}} \
    {% if wsgi_reload %}--reload {% endif %}"

RETVAL=0

start() {
	echo -n $"Starting $PROG: "

	daemon --pidfile=${PIDFILE} ${GUNICORN} ${OPTS}
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && touch ${LOCKFILE}
	return $RETVAL
}

stop() {
	echo -n $"Stopping $PROG: "
	killproc -p ${PIDFILE} ${PROG}
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${LOCKFILE} ${PIDFILE}
}

reload() {
	echo -n $"Reloading $PROG: "
	killproc -p ${PIDFILE} ${PROG} -HUP
	RETVAL=$?
	echo
}

rh_status() {
	status -p ${PIDFILE} ${PROG}
}

# See how we were called.
case "$1" in
	start)
		rh_status >/dev/null 2>&1 && exit 0
		start
	;;
	stop)
		stop
	;;
	status)
		rh_status
		RETVAL=$?
	;;
	restart)
		stop
		start
	;;
	force-reload|reload)
		reload
	;;
	*)
		echo $"Usage: $0 {start|stop|restart|force-reload|reload|status}"
		RETVAL=2
esac

exit $RETVAL
